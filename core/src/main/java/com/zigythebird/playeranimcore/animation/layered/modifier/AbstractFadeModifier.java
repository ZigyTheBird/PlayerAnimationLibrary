/*
 * MIT License
 *
 * Copyright (c) 2022 KosmX
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

package com.zigythebird.playeranimcore.animation.layered.modifier;

import com.zigythebird.playeranimcore.PlayerAnimLib;
import com.zigythebird.playeranimcore.animation.AnimationController;
import com.zigythebird.playeranimcore.animation.AnimationData;
import com.zigythebird.playeranimcore.animation.EasingType;
import com.zigythebird.playeranimcore.animation.layered.IAnimation;
import com.zigythebird.playeranimcore.bones.PlayerAnimBone;
import com.zigythebird.playeranimcore.enums.FadeType;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

/**
 * Use with ModifierLayer.
 * Set an animation as a fade from.
 * length in ticks
 */
public abstract class AbstractFadeModifier extends AbstractModifier {
    protected int length;
    protected float time;
    protected float tickDelta;

    public void setTransitionAnimation(@Nullable IAnimation transitionAnimation) {
        this.transitionAnimation = transitionAnimation;
    }

    /**
     * Animation to move from or to, can be null
     * use setTransitionAnimation(IAnimation); //generated by Lombok plugin
     */
    @Nullable
    protected IAnimation transitionAnimation = null;

    protected AbstractFadeModifier(int length) {
        this.length = length;
    }

    @Override
    public boolean isActive() {
        return super.isActive() || transitionAnimation != null && transitionAnimation.isActive();
    }

    @Override
    public boolean canRemove() {
        return getFadeType() == FadeType.FADE_IN && calculateProgress(tickDelta, null) >= 1;
    }

    @Override
    public void setupAnim(AnimationData state) {
        super.setupAnim(state);
        if (transitionAnimation != null) transitionAnimation.setupAnim(state);
        tickDelta = state.getPartialTick();
    }

    @Override
    public void tick(AnimationData state) {
        super.tick(state);
        if (transitionAnimation != null) transitionAnimation.tick(state);
        this.time++;
    }

    @Override
    public PlayerAnimBone get3DTransform(@NotNull PlayerAnimBone bone) {
        if (calculateProgress(tickDelta, bone.getName()) > 1) {
            return super.get3DTransform(bone);
        }
        PlayerAnimBone copy2 = new PlayerAnimBone(bone.getName());
        copy2.copyOtherBone(bone);
        super.get3DTransform(copy2);
        float a = getAlpha(copy2.getName(), calculateProgress(tickDelta, bone.getName()));
        if (getFadeType() == FadeType.FADE_IN) {
            if (transitionAnimation != null && transitionAnimation.isActive()) transitionAnimation.get3DTransform(bone);
        }
        return copy2.scale(a).add(bone.scale(1 - a));
    }

    protected float calculateProgress(float f, String boneName) {
        float actualTime = time + f;
        if (getFadeType() == FadeType.FADE_IN) return actualTime / length;
        float endTime = getEndTime(boneName);
        if (actualTime >= endTime) return 0;
        if (actualTime < endTime - length) return 1;
        return (endTime - actualTime) / length;
    }

    /**
     * Get the alpha at the given progress
     * @param boneName current bone's name
     * @param progress  animation progress, float between 0 and 1
     * @return alpha, float between 0 and 1, lower value means less visible from animation
     */
    protected abstract float getAlpha(String boneName, float progress);

    /**
     * Whether this modifier is for fading into an animation or out of it.
     */
    protected abstract FadeType getFadeType();

    /**
     * Gets the time when the animation is supposed to end, only called when fading out.
     * Override this if you want to fade out on something that isn't a controller.
     */
    protected float getEndTime(String boneName) {
        if (getController() instanceof AnimationController controller && controller.getCurrentAnimation() != null) {
            return controller.getCurrentAnimation().animation().length();
        }
        PlayerAnimLib.LOGGER.debug("The fade out modifier doesn't work on animations that aren't AnimationController instances! Please override the getEndTime method.");
        return 0;
    }

    /**
     * See {@link AbstractFadeModifier#standardFade} for more info.
     */
    public static AbstractFadeModifier standardFadeIn(int length, EasingType ease) {
        return standardFadeIn(length, ease, null);
    }

    /**
     * See {@link AbstractFadeModifier#standardFade} for more info.
     */
    public static AbstractFadeModifier standardFadeIn(int length, EasingType ease, @Nullable Float easingVariable) {
        return standardFade(length, ease, easingVariable, FadeType.FADE_IN);
    }

    /**
     * See {@link AbstractFadeModifier#functionalFade} for more info.
     */
    public static AbstractFadeModifier functionalFadeIn(int length, EasingFunction function) {
        return functionalFade(length, function, FadeType.FADE_IN);
    }

    /**
     * See {@link AbstractFadeModifier#standardFade} for more info.
     */
    public static AbstractFadeModifier standardFadeOut(int length, EasingType ease) {
        return standardFadeOut(length, ease, null);
    }

    /**
     * See {@link AbstractFadeModifier#standardFade} for more info.
     */
    public static AbstractFadeModifier standardFadeOut(int length, EasingType ease, @Nullable Float easingVariable) {
        return standardFade(length, ease, easingVariable, FadeType.FADE_OUT);
    }

    /**
     * See {@link AbstractFadeModifier#functionalFade} for more info.
     */
    public static AbstractFadeModifier functionalFadeOut(int length, EasingFunction function) {
        return functionalFade(length, function, FadeType.FADE_OUT);
    }

    /**
     * Creates a standard fade with an easing.
     * @param length ease length in ticks
     * @param ease   ease function from {@link EasingType}
     * @param easingVariable Some easings like {@link EasingType#EASE_IN_BOUNCE} require a variable that will modify the easing.
     * @return fade modifier
     */
    public static AbstractFadeModifier standardFade(int length, EasingType ease, @Nullable Float easingVariable, FadeType fadeType) {
        return new AbstractFadeModifier(length) {
            @Override
            protected float getAlpha(String boneName, float progress) {
                return ease.buildTransformer(easingVariable).apply(progress);
            }

            @Override
            protected FadeType getFadeType() {
                return fadeType;
            }
        };
    }

    /**
     * Functional constructor for functional folks
     * @param length   ease length
     * @param function ease function
     * @return fade
     */
    public static AbstractFadeModifier functionalFade(int length, EasingFunction function, FadeType fadeType) {
        return new AbstractFadeModifier(length) {
            @Override
            protected float getAlpha(String boneName, float progress) {
                return function.ease(boneName, progress);
            }

            @Override
            protected FadeType getFadeType() {
                return fadeType;
            }
        };
    }

    @FunctionalInterface
    public interface EasingFunction {
        float ease(String boneName, float value);
    }
}
